#include "systeminformation.h"
#include "ui_systeminformation.h"

#include "blinkytape.h"
#include "usbutils.h"
#include "blinkycontroller.h"

#include <QSysInfo>
#include <QLibraryInfo>
#include <QtWidgetsDepends>
#include <QPointer>

SystemInformation::SystemInformation(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::SystemInformation)
{
    ui->setupUi(this);

    on_refresh_clicked();
}

SystemInformation::~SystemInformation()
{
    delete ui;
}

void SystemInformation::on_refresh_clicked()
{
    QString report;

    report.append("Pattern Paint ");
    report.append(VERSION_STRING);
    report.append("\r");
    report.append("  Build Date: ");
    report.append(__DATE__);
    report.append(" ");
    report.append(__TIME__);
    report.append("\r");

#if QT_VERSION > QT_VERSION_CHECK(5, 4, 0)
    report.append("Operating system: " + QSysInfo::prettyProductName() + "\r");
#else
    report.append("Operating system: ???\r");
#endif

    // TODO: Get this from the controllers rather than building them here.
    report.append("Detected Blinkies: \r");
    foreach (const QPointer<ControllerInfo> &info, BlinkyTape::probe())
        report.append("  BlinkyTape:" + info->resourceName() + "\r");
    foreach (const QSerialPortInfo &info, BlinkyTape::probeBootloaders())
        report.append("  BlinkyTape:" + info.portName() + " (bootloader)\r");

    report.append("Detected Serial Ports: \r");
    foreach (const QSerialPortInfo &info, QSerialPortInfo::availablePorts()) {
        int version = getVersionForDevice(info.vendorIdentifier(), info.productIdentifier());

        report.append("  " + info.portName() + "\r");
        report.append("    Manufacturer: " + info.manufacturer() + "\r");
        report.append("    Description: " + info.description() + "\r");
        report.append("    VID: 0x" + QString::number(info.vendorIdentifier(), 16) + "\r");
        report.append("    PID: 0x" + QString::number(info.productIdentifier(), 16) + "\r");
        if (version > -1)
            report.append("    Version: 0x" + QString::number(version, 16) + "\r");

#if QT_VERSION > QT_VERSION_CHECK(5, 3, 0)
        report.append("    Serial: " + info.serialNumber() + "\r");
#else
        report.append("    Serial: ???\r");
#endif
    }

    ui->infoBrowser->setText(report);
}

void SystemInformation::on_copyToClipboard_clicked()
{
    QClipboard *clip = QApplication::clipboard();
    QString input = ui->infoBrowser->toPlainText();
    clip->setText(input);
}

void SystemInformation::on_sendToSupport_clicked()
{
    QString body = "Thanks for helping make Pattern Paint a better program!\r"
                   "Please fill out this brief questionaire to help us better understand your issue.\r\r"
                   "1. Please describe the issue you are having:\r\r\r\r"
                   "2. How can we reproduce it? Be as detailed as possible. If there is a specific pattern that causes the problem, please attach it:\r\r\r\r"
                   "3. Has this worked for you before?\r\r\r\r"
                   "============ System Information generated by PatternPaint ============\r"
                   + ui->infoBrowser->toPlainText();

    QDesktopServices::openUrl(QUrl(
                                  "mailto:support@blinkinlabs.com?subject=Pattern Paint issue&body="
                                  + body,
                                  QUrl::TolerantMode));
}
